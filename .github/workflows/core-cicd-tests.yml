name: Core CICD Dockerized Tests
on: [pull_request, push]

jobs:
  run-unit-integration-tests-job:
    name: Core Tests
    runs-on: ubuntu-latest
    env:
      DOT_CICD_CLOUD_PROVIDER: github
      DOT_CICD_TARGET: core
      EXPORT_REPORTS: true
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USER: dotcmsbuild
      GITHUB_USER_TOKEN: ${{ secrets.USER_TOKEN }}
      PULL_REQUEST: ${{ github.event.number }}
    if: github.event_name == 'pull_request' || github.ref == 'master' || startsWith(github.ref, 'release-') || startsWith(github.ref, 'test-')
    steps:
      - name: Checkout core
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Set Common Vars
        run: |
          if [[ -z "${{ github.event.number }}" ]]; then
            BRANCH=$(basename "${{ github.ref }}")
            COMMIT_MESSG=$(git log --format=%s -n 1 ${{ github.event.after }})
            echo ::set-env name=CURRENT_BRANCH::$(basename "${{ github.ref }}")
            echo ::set-env name=commitMsg::$(git log --format=%s -n 1 ${{ github.event.after }})
          else
            BRANCH="${{ github.head_ref }}"
            COMMIT_MESSG=$(git log -1 --pretty=format:%s)
            echo ::set-env name=CURRENT_BRANCH::"${{ github.head_ref }}"
            echo ::set-env name=commitMsg::$(git log -1 --pretty=format:%s)
          fi

          TYPE="${{ github.event_name }}"
          if [[ "${TYPE}" != "pull_request" && ("${BRANCH}" == "master" || "${BRANCH}" =~ ^release-* || "${BRANCH}" =~ ^test-*) ]]; then
            echo ::set-env name=allDbs::true
          else
            echo ::set-env name=allDbs::false
          fi
      - name: Prepare dot-cicd
        run: |
          echo "Commit message: '${{ env.commitMsg }}'"
          chmod +x .cicd/discover.sh && .cicd/discover.sh
      - name: Build Tests Base Image
        run: |
          source dotcicd/library/pipeline.sh buildTestsBase
        env:
          LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
      - name: Run Unit Tests
        run: |
          source dotcicd/library/pipeline.sh runUnit
          echo ::set-env name=testResult::$(echo $?)
      - name: Run Integration Tests - postgres
        run: |
          source dotcicd/library/pipeline.sh runIntegration
        env:
          databaseType: postgres
        if: env.testResult && ((!startsWith(env.commitMsg, '[github mysql]') && !startsWith(env.commitMsg, '[github oracle]') && !startsWith(env.commitMsg, '[github mssql]')) || startsWith(env.commitMsg, '[github]') || startsWith(env.commitMsg, '[github postgres]'))
      - name: Run Integration Tests - mysql
        run: |
          source dotcicd/library/pipeline.sh runIntegration
        env:
          databaseType: mysql
        if: env.testResult && (env.allDbs == true || startsWith(env.commitMsg, '[github]') || startsWith(env.commitMsg, '[github mysql]'))
      - name: Run Integration Tests - oracle
        run: |
          source dotcicd/library/pipeline.sh runIntegration
        env:
          databaseType: oracle
        if: env.testResult && (env.allDbs == true || startsWith(env.commitMsg, '[github]') || startsWith(env.commitMsg, '[github oracle]'))
      - name: Run Integration Tests - mssql
        run: |
          source dotcicd/library/pipeline.sh runIntegration
        env:
          databaseType: mssql
        if: env.testResult && (env.allDbs == true || startsWith(env.commitMsg, '[github]') || startsWith(env.commitMsg, '[github mssql]'))
  run-curl-tests-job:
    name: Core Curl (Postman) Tests
    runs-on: ubuntu-latest
    env:
      DOT_CICD_CLOUD_PROVIDER: github
      DOT_CICD_TARGET: core
      EXPORT_REPORTS: true
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USER: dotcmsbuild
      GITHUB_USER_TOKEN: ${{ secrets.USER_TOKEN }}
      PULL_REQUEST: ${{ github.event.number }}
    if: github.event_name == 'pull_request' || github.ref == 'master' || startsWith(github.ref, 'release-') || startsWith(github.ref, 'test-')
    steps:
      - name: Checkout core
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Set Common Vars
        run: |
          if [[ -z "${{ github.event.number }}" ]]; then
            BRANCH=$(basename "${{ github.ref }}")
            COMMIT_MESSG=$(git log --format=%s -n 1 ${{ github.event.after }})
            echo ::set-env name=CURRENT_BRANCH::$(basename "${{ github.ref }}")
            echo ::set-env name=commitMsg::$(git log --format=%s -n 1 ${{ github.event.after }})
          else
            BRANCH="${{ github.head_ref }}"
            COMMIT_MESSG=$(git log -1 --pretty=format:%s)
            echo ::set-env name=CURRENT_BRANCH::"${{ github.head_ref }}"
            echo ::set-env name=commitMsg::$(git log -1 --pretty=format:%s)
          fi

          TYPE="${{ github.event_name }}"
          if [[ "${TYPE}" != "pull_request" && ("${BRANCH}" == "master" || "${BRANCH}" =~ ^release-* || "${BRANCH}" =~ ^test-*) ]]; then
            echo ::set-env name=allDbs::true
          else
            echo ::set-env name=allDbs::false
          fi
      - name: Prepare dot-cicd
        run: |
          echo "Commit message: '${{ env.commitMsg }}'"
          chmod +x .cicd/discover.sh && .cicd/discover.sh
      - name: Build DotCMS Image
        run: |
          source dotcicd/library/pipeline.sh buildBase
        env:
          LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
      - name: Build Tests Base Image
        run: |
          source dotcicd/library/pipeline.sh buildTestsBase
        env:
          LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
      - name: Run Curl Tests - postrgres
        run: |
          dotcicd/library/pipeline.sh runCurl
        env:
          LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
          databaseType: postgres
          PROVIDER_DB_USERNAME: postgres
          PROVIDER_DB_PASSWORD: postgres
        if: env.testResult && ((!startsWith(env.commitMsg, '[github mysql]') && !startsWith(env.commitMsg, '[github oracle]') && !startsWith(env.commitMsg, '[github mssql]')) || startsWith(env.commitMsg, '[github]') || startsWith(env.commitMsg, '[github postgres]'))
      - name: Run Curl Tests - mysql
        run: |
          dotcicd/library/pipeline.sh runCurl
        env:
          LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
          databaseType: mysql
          PROVIDER_DB_USERNAME: mysql
          PROVIDER_DB_PASSWORD: mysql
        if: env.testResult && (env.allDbs == true || startsWith(env.commitMsg, '[github]') || startsWith(env.commitMsg, '[github mysql]'))
      - name: Run Curl Tests - oracle
        run: |
          dotcicd/library/pipeline.sh runCurl
        env:
          LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
          databaseType: oracle
          PROVIDER_DB_USERNAME: oracle
          PROVIDER_DB_PASSWORD: oracle
        if: env.testResult && (env.allDbs == true || startsWith(env.commitMsg, '[github]') || startsWith(env.commitMsg, '[github oracle]'))
      - name: Run Curl Tests - mssql
        run: |
          dotcicd/library/pipeline.sh runCurl
        env:
          LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
          databaseType: mssql
          PROVIDER_DB_USERNAME: sa
          PROVIDER_DB_PASSWORD: mssqldotCMS2019
        if: env.testResult && (env.allDbs == true || startsWith(env.commitMsg, '[github]') || startsWith(env.commitMsg, '[github mssql]'))
